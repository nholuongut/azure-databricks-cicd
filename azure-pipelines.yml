trigger:
- dev

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python37:
      python.version: '3.7'

variables:
- name: notebook-name
  value: friends-notebook

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
  displayName: 'Install dependencies'
- script: |
    python -m pip install flake8
    flake8 ./friends/
  displayName: 'Run lint tests'
- script: |
    python -m pip install pytest pytest-azurepipeline
    pytest test --doctest-modules --junitxml=junit/test-results.xml --cov=./friends --cov-report=xml --cov-report=html
  displayName: 'Test with pytest'
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
   testResultsFiles: '**/test-*.xml'
   testRunTitle: 'Publish test results for Python $(python.version)'
- task: PublishCodeCoverageResults@1
  inputs:
   codeCoverageTool: Cobertura
   summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
   reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
- bash: |
    mkdir -p "$(Build.ArtifactStagingDirectory)/template"
    cp template/dbx.parameters.json template/dbx.template.json "$(Build.ArtifactStagingDirectory)/template/"
  displayName: 'ARM template Build Artifacts'
- bash: |
    mkdir -p "$(Build.ArtifactStagingDirectory)/notebook"
    cp notebook/$(notebook-name).py "$(Build.ArtifactStagingDirectory)/notebook/$(notebook-name)-$(Build.SourceVersion).py"
  displayName: 'Notebook Build Artifacts'
- task: PublishBuildArtifacts@1
  displayName: Publish ARM Template Build Artifacts
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/template'
    artifactName: template
- task: PublishBuildArtifacts@1
  displayName: Publish Notebook Build Artifacts
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/notebook'
    artifactName: notebook
- script: |
    mkdir -p "$(Build.ArtifactStagingDirectory)/wheel"
    pip install wheel setuptools
    python setup.py bdist_wheel --universal
    cp dist/friends-0.0.1-py2.py3-none-any.whl "$(Build.ArtifactStagingDirectory)/wheel/friends-0.0.1-py2.py3-none-any.whl"
  displayName: 'Publish build wheel artifact'
- task: PublishBuildArtifacts@1
  displayName: Publish Wheel Build Artifacts
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/wheel'
    artifactName: wheel